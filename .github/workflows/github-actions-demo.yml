name: GitHub Actions Demo
on: 
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      test_input1:
        description: 'Enter anything.'
        required: false
        default: 'test1'
      testInput2:
        description: 'Enter anything.'
        required: false
        default: 'test2'

jobs:
  Explore-GitHub-Actions:
    runs-on: windows-2019
    steps:
      - run: echo "Github events name is ${{ github.event_name }}."
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Before checkout, list files in the repository.
        run: |
          ls ${{ github.workspace }}
      - shell: pwsh
        run: |
          if ("${{ github.head_ref }}")
          {
            Write-Host "head_ref: ${{ github.head_ref }}"
          }
          if ("${{ github.head_ref }}")
          {
            Write-Host "base_ref: ${{ github.base_ref }}"
          }
      - name: List files in the repository before checkout.
        shell: pwsh
        run: |
          Write-Host "Current directory before checkout"
          Get-Location | Out-Host
      - name: Check out repository code
        uses: actions/checkout@v2
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: echo "üçè This job's status is ${{ job.status }}."
      - name: Run PowerShell script.
        shell: pwsh
        run: |
          Write-Host "WITHIN YAML"
          Write-Host "test_input1: @@@$($env:INPUT_TEST_INPUT1)@@@"
          Write-Host "testInput2: @@@$($env:INPUT_TESTINPUT2)@@@"
          ${{ github.workspace }}\test.ps1
      - name: Git version
        shell: pwsh
        run: |
          Write-Host "Git version:"
          git --version
          Write-Host "Git version above."
